import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ Firebase)
interface User {
  uid: string;
  email: string | null;
  displayName: string | null;
  photoURL: string | null;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Ä–æ–ª–∏
interface UserData {
  uid: string;
  email: string | null;
  displayName: string | null;
  role: 'user' | 'organizer' | 'admin';
  photoURL?: string | null;
  profileCompleted: boolean;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  nickname?: string | null;
  age?: number | null;
  height?: number | null;
  createdAt?: any;
}

interface AuthContextProps {
  currentUser: User | null;
  userData: UserData | null;
  loading: boolean;
  register: (email: string, password: string, displayName: string) => Promise<User | null>;
  login: (email: string, password: string) => Promise<User | null>;
  logout: () => Promise<void>;
  isAdmin: () => boolean;
  isOrganizer: () => boolean;
  authError: string | null;
  refreshUserData: () => Promise<void>;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

// –ú–æ–∫–Ω—É—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const MOCK_USER: User = {
  uid: 'mock-user-123',
  email: 'user@example.com',
  displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  photoURL: 'https://via.placeholder.com/150'
};

const MOCK_ADMIN_USER: User = {
  uid: 'mock-admin-123',
  email: 'admin@example.com',
  displayName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  photoURL: 'https://via.placeholder.com/150'
};

const MOCK_ORGANIZER_USER: User = {
  uid: 'mock-organizer-123',
  email: 'organizer@example.com',
  displayName: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
  photoURL: 'https://via.placeholder.com/150'
};

// –ú–æ–∫–Ω—É—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const MOCK_USER_DATA: UserData = {
  uid: MOCK_USER.uid,
  email: MOCK_USER.email,
  displayName: MOCK_USER.displayName,
  role: 'user',
  photoURL: MOCK_USER.photoURL,
  profileCompleted: true,
  nickname: 'Volleyball_Player',
  age: 25,
  height: 180
};

// –ú–æ–∫–Ω—É—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const MOCK_ADMIN_DATA: UserData = {
  uid: MOCK_ADMIN_USER.uid,
  email: MOCK_ADMIN_USER.email,
  displayName: MOCK_ADMIN_USER.displayName,
  role: 'admin',
  photoURL: MOCK_ADMIN_USER.photoURL,
  profileCompleted: true
};

// –ú–æ–∫–Ω—É—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
const MOCK_ORGANIZER_DATA: UserData = {
  uid: MOCK_ORGANIZER_USER.uid,
  email: MOCK_ORGANIZER_USER.email,
  displayName: MOCK_ORGANIZER_USER.displayName,
  role: 'organizer',
  photoURL: MOCK_ORGANIZER_USER.photoURL,
  profileCompleted: true
};

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserData = async () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    // –í —ç—Ç–æ–π –∑–∞–≥–ª—É—à–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return;
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const register = async (email: string, password: string, displayName: string) => {
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    setAuthError(null);

    // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: User = {
      uid: `user-${Date.now()}`,
      email: email,
      displayName: displayName,
      photoURL: null
    };

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserData: UserData = {
      uid: newUser.uid,
      email: newUser.email,
      displayName: newUser.displayName,
      role: 'user',
      photoURL: null,
      profileCompleted: false,
      createdAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.setItem('currentUser', JSON.stringify(newUser));
    localStorage.setItem('userData', JSON.stringify(newUserData));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCurrentUser(newUser);
    setUserData(newUserData);
    setLoading(false);

    return newUser;
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞
  const login = async (email: string, password: string) => {
    console.log('üîÑ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    setAuthError(null);

    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç email –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user: User;
    let userDataMock: UserData;
    
    if (email === 'admin@example.com') {
      user = MOCK_ADMIN_USER;
      userDataMock = MOCK_ADMIN_DATA;
    } else if (email === 'organizer@example.com') {
      user = MOCK_ORGANIZER_USER;
      userDataMock = MOCK_ORGANIZER_DATA;
    } else {
      user = MOCK_USER;
      userDataMock = MOCK_USER_DATA;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.setItem('currentUser', JSON.stringify(user));
    localStorage.setItem('userData', JSON.stringify(userDataMock));
    
    setCurrentUser(user);
    setUserData(userDataMock);
    setLoading(false);
    
    return user;
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
  const logout = async () => {
    console.log('üîÑ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.removeItem('currentUser');
    localStorage.removeItem('userData');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setCurrentUser(null);
    setUserData(null);
    setLoading(false);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthContext (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const savedUser = localStorage.getItem('currentUser');
    const savedUserData = localStorage.getItem('userData');
    
    if (savedUser && savedUserData) {
      setCurrentUser(JSON.parse(savedUser));
      setUserData(JSON.parse(savedUserData));
      console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è');
    } else {
      console.log('‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    setLoading(false);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = () => {
    return userData?.role === 'admin';
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  const isOrganizer = () => {
    return userData?.role === 'organizer' || userData?.role === 'admin';
  };

  const value: AuthContextProps = {
    currentUser,
    userData,
    loading,
    register,
    login,
    logout,
    isAdmin,
    isOrganizer,
    authError,
    refreshUserData
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}; 