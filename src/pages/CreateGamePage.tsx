import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';
import { FiArrowLeft, FiCalendar, FiClock, FiMap, FiCheck, FiUsers } from 'react-icons/fi';
import Button from '../components/ui/Button';
import { useAuth } from '../contexts/AuthContext';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { ru } from 'date-fns/locale/ru';

interface GameFormData {
  title: string;
  location: string;
  dateObj: Date | null;
  timeObj: Date | null;
  duration: string;
  format: string;
  totalSpots: number;
}

// –¢–æ–ª—å–∫–æ 2 —Ñ–æ—Ä–º–∞—Ç–∞ –∏–≥—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
const FORMATS = [
  { value: 'friendly', label: '–î—Ä—É–∂–µ—Å–∫–∞—è –∏–≥—Ä–∞' },
  { value: 'tournament', label: '–¢—É—Ä–Ω–∏—Ä' }
];

const CreateGamePage: React.FC = () => {
  const navigate = useNavigate();
  const { currentUser, userData, isOrganizer, isAdmin } = useAuth();
  
  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
  const organizerName = userData?.displayName || '–ò–≥—Ä–∞';
  const defaultTitle = `–ò–≥—Ä–∞ –æ—Ç ${organizerName}`;
  
  // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const today = new Date();
  const minDate = new Date();
  const minTime = new Date();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–µ–∫—É—â–µ–µ + 3 —á–∞—Å–∞)
  minTime.setHours(today.getHours() + 3);
  
  const [formData, setFormData] = useState<GameFormData>({
    title: defaultTitle,
    location: '',
    dateObj: null,
    timeObj: null,
    duration: '2',
    format: 'friendly',
    totalSpots: 12, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });
  
  const [errors, setErrors] = useState<Partial<Record<keyof GameFormData | 'date' | 'time', string>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  useEffect(() => {
    if (!isOrganizer() && !isAdmin()) {
      console.log('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
      navigate('/access-denied');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setFormData(prev => ({
      ...prev,
      title: defaultTitle
    }));
  }, [currentUser, userData, isOrganizer, isAdmin, navigate, defaultTitle]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
    
    // Clear error when field is edited
    if (errors[name as keyof GameFormData]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined,
      }));
    }
  };
  
  const handleDateChange = (date: Date | null) => {
    if (date) {
      setFormData(prev => ({
        ...prev,
        dateObj: date,
      }));
      
      if (errors.date || errors.dateObj) {
        setErrors(prev => ({
          ...prev,
          date: undefined,
          dateObj: undefined,
        }));
      }
      
      // –ï—Å–ª–∏ –º–µ–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
      const today = new Date();
      const isToday = date.getDate() === today.getDate() &&
                      date.getMonth() === today.getMonth() &&
                      date.getFullYear() === today.getFullYear();
      
      if (isToday && formData.timeObj) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
        const gameTime = new Date(formData.timeObj);
        const minAllowedTime = new Date();
        minAllowedTime.setHours(today.getHours() + 3);
        
        if (gameTime < minAllowedTime) {
          setErrors(prev => ({
            ...prev,
            time: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
            timeObj: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
          }));
        }
      }
    }
  };
  
  const handleTimeChange = (time: Date | null) => {
    if (time) {
      setFormData(prev => ({
        ...prev,
        timeObj: time,
      }));
      
      if (errors.time || errors.timeObj) {
        setErrors(prev => ({
          ...prev,
          time: undefined,
          timeObj: undefined,
        }));
      }
      
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
      if (formData.dateObj) {
        const today = new Date();
        const isToday = formData.dateObj.getDate() === today.getDate() &&
                        formData.dateObj.getMonth() === today.getMonth() &&
                        formData.dateObj.getFullYear() === today.getFullYear();
        
        if (isToday) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
          const gameTime = new Date(time);
          const minAllowedTime = new Date();
          minAllowedTime.setHours(today.getHours() + 3);
          
          if (gameTime < minAllowedTime) {
            setErrors(prev => ({
              ...prev,
              time: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
              timeObj: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
            }));
          }
        }
      }
    }
  };
  
  const handleNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const numValue = parseInt(value, 10);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - 12
    if (!isNaN(numValue) && numValue >= 12) {
      setFormData(prev => ({
        ...prev,
        [name]: numValue,
      }));
      
      if (errors[name as keyof GameFormData]) {
        setErrors(prev => ({
          ...prev,
          [name]: undefined,
        }));
      }
    }
  };
  
  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof GameFormData | 'date' | 'time', string>> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã';
    }
    
    if (!formData.location.trim()) {
      newErrors.location = '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è';
    }
    
    if (!formData.dateObj) {
      newErrors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
      newErrors.dateObj = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const gameDate = new Date(formData.dateObj);
      gameDate.setHours(0, 0, 0, 0);
      
      if (gameDate < today) {
        newErrors.date = '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
        newErrors.dateObj = '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
      }
    }
    
    if (!formData.timeObj) {
      newErrors.time = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
      newErrors.timeObj = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
      const now = new Date();
      
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
      if (formData.dateObj) {
        const today = new Date();
        const isToday = formData.dateObj.getDate() === today.getDate() &&
                        formData.dateObj.getMonth() === today.getMonth() &&
                        formData.dateObj.getFullYear() === today.getFullYear();
        
        if (isToday) {
          const gameTime = new Date(formData.timeObj);
          const minAllowedTime = new Date();
          minAllowedTime.setHours(now.getHours() + 3);
          
          if (gameTime < minAllowedTime) {
            newErrors.time = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
            newErrors.timeObj = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
          }
        }
      }
    }
    
    if (!formData.totalSpots || formData.totalSpots < 12) {
      newErrors.totalSpots = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 12';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const dateString = formData.dateObj 
      ? `${formData.dateObj.getDate().toString().padStart(2, '0')}.${(formData.dateObj.getMonth() + 1).toString().padStart(2, '0')}.${formData.dateObj.getFullYear()}`
      : '';
      
    const timeString = formData.timeObj
      ? `${formData.timeObj.getHours().toString().padStart(2, '0')}:${formData.timeObj.getMinutes().toString().padStart(2, '0')}`
      : '';
    
    const submissionData = {
      ...formData,
      date: dateString,
      time: timeString,
    };
    
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', {
      userId: currentUser?.uid,
      userRole: userData?.role,
      gameData: submissionData
    });
    
    setTimeout(() => {
      setIsSubmitting(false);
      setSubmitSuccess(true);
      
      setTimeout(() => {
        navigate('/games/1');
      }, 2000);
    }, 1500);
  };
  
  const handleCancel = () => {
    navigate(-1);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã
  const filterTime = (time: Date): boolean => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (+3 —á–∞—Å–∞)
    if (formData.dateObj) {
      const today = new Date();
      const isToday = formData.dateObj.getDate() === today.getDate() &&
                      formData.dateObj.getMonth() === today.getMonth() &&
                      formData.dateObj.getFullYear() === today.getFullYear();
      
      if (isToday) {
        const minTime = new Date();
        minTime.setHours(today.getHours() + 3);
        return time >= minTime;
      }
    }
    
    return true;
  };

  return (
    <PageContainer>
      <PageHeader>
        <div className="container">
          <BackButton as={Link} to="/games">
            <FiArrowLeft />
            <span>–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä</span>
          </BackButton>
          <PageTitle>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã</PageTitle>
        </div>
      </PageHeader>

      <PageContent>
        <div className="container">
          {submitSuccess ? (
            <SuccessMessage
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <SuccessIcon>
                <FiCheck size={48} />
              </SuccessIcon>
              <SuccessTitle>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</SuccessTitle>
              <SuccessText>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã...</SuccessText>
            </SuccessMessage>
          ) : (
            <FormContainer
              as={motion.form}
              onSubmit={handleSubmit}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <FormSection>
                <FormGroup>
                  <FormLabel htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</FormLabel>
                  <FormInput
                    type="text"
                    id="title"
                    name="title"
                    value={formData.title}
                    onChange={handleChange}
                    error={!!errors.title}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"
                  />
                  {errors.title && <ErrorMessage>{errors.title}</ErrorMessage>}
                </FormGroup>

                <FormGroup>
                  <FormLabel htmlFor="location">–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</FormLabel>
                  <InputWithIcon>
                    <LocationIcon>
                      <FiMap />
                    </LocationIcon>
                    <FormInput
                      type="text"
                      id="location"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      error={!!errors.location}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
                      className="input-with-icon"
                    />
                  </InputWithIcon>
                  {errors.location && <ErrorMessage>{errors.location}</ErrorMessage>}
                </FormGroup>

                <FormRow>
                  <FormGroup>
                    <FormLabel htmlFor="date">–î–∞—Ç–∞</FormLabel>
                    <InputWithIcon>
                      <DateIcon>
                        <FiCalendar />
                      </DateIcon>
                      <DatePickerWrapper error={!!errors.date}>
                        <DatePicker
                          selected={formData.dateObj}
                          onChange={handleDateChange}
                          dateFormat="dd.MM.yyyy"
                          minDate={minDate}
                          placeholderText="–î–î.–ú–ú.–ì–ì–ì–ì"
                          locale={ru}
                          className="date-picker-input input-with-icon"
                          id="date"
                          autoComplete="off"
                        />
                      </DatePickerWrapper>
                    </InputWithIcon>
                    {errors.date && <ErrorMessage>{errors.date}</ErrorMessage>}
                  </FormGroup>

                  <FormGroup>
                    <FormLabel htmlFor="time">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</FormLabel>
                    <InputWithIcon>
                      <TimeIcon>
                        <FiClock />
                      </TimeIcon>
                      <DatePickerWrapper error={!!errors.time}>
                        <DatePicker
                          selected={formData.timeObj}
                          onChange={handleTimeChange}
                          showTimeSelect
                          showTimeSelectOnly
                          timeIntervals={15}
                          timeCaption="–í—Ä–µ–º—è"
                          dateFormat="HH:mm"
                          placeholderText="–ß–ß:–ú–ú"
                          locale={ru}
                          filterTime={filterTime}
                          className="date-picker-input input-with-icon"
                          id="time"
                          autoComplete="off"
                        />
                      </DatePickerWrapper>
                    </InputWithIcon>
                    {errors.time && <ErrorMessage>{errors.time}</ErrorMessage>}
                  </FormGroup>
                </FormRow>

                <FormRow>
                  <FormGroup>
                    <FormLabel htmlFor="duration">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)</FormLabel>
                    <FormInput
                      type="number"
                      id="duration"
                      name="duration"
                      value={formData.duration}
                      onChange={handleChange}
                      min="1"
                      max="10"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö"
                    />
                  </FormGroup>

                  <FormGroup>
                    <FormLabel htmlFor="format">–§–æ—Ä–º–∞—Ç –∏–≥—Ä—ã</FormLabel>
                    <FormSelect
                      id="format"
                      name="format"
                      value={formData.format}
                      onChange={handleChange}
                    >
                      {FORMATS.map(format => (
                        <option key={format.value} value={format.value}>
                          {format.label}
                        </option>
                      ))}
                    </FormSelect>
                  </FormGroup>
                </FormRow>

                <FormGroup>
                  <FormLabel htmlFor="totalSpots">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</FormLabel>
                  <InputWithIcon>
                    <UsersIcon>
                      <FiUsers />
                    </UsersIcon>
                    <FormInput
                      type="number"
                      id="totalSpots"
                      name="totalSpots"
                      value={formData.totalSpots}
                      onChange={handleNumberChange}
                      error={!!errors.totalSpots}
                      min="12"
                      className="input-with-icon"
                      placeholder="–ú–∏–Ω–∏–º—É–º 12 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    />
                  </InputWithIcon>
                  {errors.totalSpots && <ErrorMessage>{errors.totalSpots}</ErrorMessage>}
                </FormGroup>
              </FormSection>

              <FormActions>
                <Button
                  type="button"
                  variant="secondary"
                  onClick={handleCancel}
                  disabled={isSubmitting}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  type="submit"
                  variant="primary"
                  disabled={isSubmitting}
                  isLoading={isSubmitting}
                >
                  –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                </Button>
              </FormActions>
            </FormContainer>
          )}
        </div>
      </PageContent>
    </PageContainer>
  );
};

// Styled Components
const PageContainer = styled.div`
  min-height: 100vh;
  background-color: ${({ theme }) => theme.colors.background};
`;

const PageHeader = styled.header`
  background-color: ${({ theme }) => theme.colors.primary};
  color: white;
  padding: ${({ theme }) => theme.space.lg} 0;
`;

const BackButton = styled(Link)`
  display: inline-flex;
  align-items: center;
  gap: ${({ theme }) => theme.space.xs};
  color: white;
  margin-bottom: ${({ theme }) => theme.space.xs};
  text-decoration: none;
  
  &:hover {
    text-decoration: underline;
  }
`;

const PageTitle = styled.h1`
  font-size: ${({ theme }) => theme.fontSizes.xl};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
`;

const PageContent = styled.main`
  padding: ${({ theme }) => theme.space.xl} 0;
`;

const FormContainer = styled.form`
  max-width: 800px;
  margin: 0 auto;
  background-color: white;
  border-radius: ${({ theme }) => theme.radii.lg};
  box-shadow: ${({ theme }) => theme.shadows.md};
  overflow: hidden;
`;

const FormSection = styled.section`
  padding: ${({ theme }) => theme.space.lg};
`;

const FormGroup = styled.div`
  margin-bottom: ${({ theme }) => theme.space.lg};
`;

const FormRow = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: ${({ theme }) => theme.space.md};
  
  @media (max-width: 640px) {
    grid-template-columns: 1fr;
  }
`;

const FormLabel = styled.label`
  display: block;
  font-size: ${({ theme }) => theme.fontSizes.sm};
  font-weight: ${({ theme }) => theme.fontWeights.medium};
  color: ${({ theme }) => theme.colors.textPrimary};
  margin-bottom: ${({ theme }) => theme.space.xs};
`;

interface FormInputProps {
  error?: boolean;
}

const FormInput = styled.input<FormInputProps>`
  width: 100%;
  padding: ${({ theme }) => theme.space.md};
  border: 1px solid ${({ theme, error }) => 
    error ? theme.colors.danger : theme.colors.border};
  border-radius: ${({ theme }) => theme.radii.md};
  font-size: ${({ theme }) => theme.fontSizes.md};
  
  &:focus {
    outline: none;
    border-color: ${({ theme, error }) => 
      error ? theme.colors.danger : theme.colors.primary};
    box-shadow: 0 0 0 2px ${({ theme, error }) => 
      error ? `${theme.colors.danger}25` : `${theme.colors.primary}25`};
  }
  
  &.input-with-icon {
    padding-left: 2.5rem;
  }
`;

const FormSelect = styled.select`
  width: 100%;
  padding: ${({ theme }) => theme.space.md};
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.radii.md};
  font-size: ${({ theme }) => theme.fontSizes.md};
  background-color: white;
  
  &:focus {
    outline: none;
    border-color: ${({ theme }) => theme.colors.primary};
    box-shadow: 0 0 0 2px ${({ theme }) => `${theme.colors.primary}25`};
  }
`;

const InputWithIcon = styled.div`
  position: relative;
`;

const DatePickerWrapper = styled.div<FormInputProps>`
  .date-picker-input {
    width: 100%;
    padding: ${({ theme }) => theme.space.md};
    padding-left: 2.5rem;
    border: 1px solid ${({ theme, error }) => 
      error ? theme.colors.danger : theme.colors.border};
    border-radius: ${({ theme }) => theme.radii.md};
    font-size: ${({ theme }) => theme.fontSizes.md};
    
    &:focus {
      outline: none;
      border-color: ${({ theme, error }) => 
        error ? theme.colors.danger : theme.colors.primary};
      box-shadow: 0 0 0 2px ${({ theme, error }) => 
        error ? `${theme.colors.danger}25` : `${theme.colors.primary}25`};
    }
  }
`;

const DateIcon = styled.div`
  position: absolute;
  top: 50%;
  left: 0.75rem;
  transform: translateY(-50%);
  color: ${({ theme }) => theme.colors.textSecondary};
  pointer-events: none;
  z-index: 1;
`;

const TimeIcon = styled.div`
  position: absolute;
  top: 50%;
  left: 0.75rem;
  transform: translateY(-50%);
  color: ${({ theme }) => theme.colors.textSecondary};
  pointer-events: none;
  z-index: 1;
`;

const LocationIcon = styled.div`
  position: absolute;
  top: 50%;
  left: 0.75rem;
  transform: translateY(-50%);
  color: ${({ theme }) => theme.colors.textSecondary};
  pointer-events: none;
  z-index: 1;
`;

const UsersIcon = styled.div`
  position: absolute;
  top: 50%;
  left: 0.75rem;
  transform: translateY(-50%);
  color: ${({ theme }) => theme.colors.textSecondary};
  pointer-events: none;
  z-index: 1;
`;

const ErrorMessage = styled.p`
  color: ${({ theme }) => theme.colors.danger};
  font-size: ${({ theme }) => theme.fontSizes.sm};
  margin-top: ${({ theme }) => theme.space.xs};
`;

const FormActions = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: ${({ theme }) => theme.space.md};
  padding: ${({ theme }) => theme.space.lg};
  background-color: ${({ theme }) => theme.colors.backgroundLight};
  border-top: 1px solid ${({ theme }) => theme.colors.border};
`;

const SuccessMessage = styled(motion.div)`
  text-align: center;
  max-width: 600px;
  margin: 0 auto;
  padding: ${({ theme }) => theme.space.xl};
  background-color: white;
  border-radius: ${({ theme }) => theme.radii.lg};
  box-shadow: ${({ theme }) => theme.shadows.md};
`;

const SuccessIcon = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 80px;
  height: 80px;
  margin: 0 auto ${({ theme }) => theme.space.lg};
  background-color: ${({ theme }) => theme.colors.success + '20'};
  color: ${({ theme }) => theme.colors.success};
  border-radius: 50%;
`;

const SuccessTitle = styled.h2`
  font-size: ${({ theme }) => theme.fontSizes.xl};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
  color: ${({ theme }) => theme.colors.textPrimary};
  margin-bottom: ${({ theme }) => theme.space.sm};
`;

const SuccessText = styled.p`
  color: ${({ theme }) => theme.colors.textSecondary};
  font-size: ${({ theme }) => theme.fontSizes.md};
`;

export default CreateGamePage; 